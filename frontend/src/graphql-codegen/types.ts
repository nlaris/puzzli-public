// AUTO-GENERATED 

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
};

/** Autogenerated input type of CreateGameForDate */
export type CreateGameForDateInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  input: GameInput;
};

/** Input for fetching/creating the game of the day */
export type GameInput = {
  date: Scalars['String']['input'];
};

/** Output for fetching/creating the game of the day */
export type GameOutput = {
  __typename?: 'GameOutput';
  date: Scalars['String']['output'];
  errors?: Maybe<Array<Scalars['String']['output']>>;
  numSolutions?: Maybe<Scalars['Int']['output']>;
  success: Scalars['Boolean']['output'];
  tiles?: Maybe<Array<TileOutput>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  /** Create game for a date */
  createGameForDate: Scalars['Boolean']['output'];
  /** Submit a user's game */
  submitUserGame?: Maybe<UserSubmissionOutput>;
};


export type MutationCreateGameForDateArgs = {
  input: CreateGameForDateInput;
};


export type MutationSubmitUserGameArgs = {
  input: SubmitUserGameInput;
};

export type Query = {
  __typename?: 'Query';
  /** Fetch game of the day */
  gameOfTheDay?: Maybe<GameOutput>;
};


export type QueryGameOfTheDayArgs = {
  input: GameInput;
};

/** Autogenerated input type of SubmitUserGame */
export type SubmitUserGameInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']['input']>;
  input: UserSubmissionInput;
};

/** Tile to be used in user submission */
export type TileInput = {
  pattern: Scalars['String']['input'];
  rotation: Scalars['Int']['input'];
};

/** A tile to be used in a game */
export type TileOutput = {
  __typename?: 'TileOutput';
  adjustedPattern: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  pattern: Scalars['String']['output'];
  rotation: Scalars['Int']['output'];
  solutionIndex: Scalars['Int']['output'];
};

/** User submission */
export type UserSubmissionInput = {
  date: Scalars['String']['input'];
  elapsedTime: Scalars['Int']['input'];
  tiles: Array<TileInput>;
  userId: Scalars['String']['input'];
};

/** User submission output */
export type UserSubmissionOutput = {
  __typename?: 'UserSubmissionOutput';
  errors?: Maybe<Array<Scalars['String']['output']>>;
  solved?: Maybe<Scalars['Boolean']['output']>;
  streak?: Maybe<Scalars['Int']['output']>;
  success: Scalars['Boolean']['output'];
};
